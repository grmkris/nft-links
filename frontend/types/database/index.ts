/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/files": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.files.id"];
          created_at?: parameters["rowFilter.files.created_at"];
          user?: parameters["rowFilter.files.user"];
          size?: parameters["rowFilter.files.size"];
          /** filetype */
          type?: parameters["rowFilter.files.type"];
          /** filename */
          name?: parameters["rowFilter.files.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["files"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** files */
          files?: definitions["files"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.files.id"];
          created_at?: parameters["rowFilter.files.created_at"];
          user?: parameters["rowFilter.files.user"];
          size?: parameters["rowFilter.files.size"];
          /** filetype */
          type?: parameters["rowFilter.files.type"];
          /** filename */
          name?: parameters["rowFilter.files.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.files.id"];
          created_at?: parameters["rowFilter.files.created_at"];
          user?: parameters["rowFilter.files.user"];
          size?: parameters["rowFilter.files.size"];
          /** filetype */
          type?: parameters["rowFilter.files.type"];
          /** filename */
          name?: parameters["rowFilter.files.name"];
        };
        body: {
          /** files */
          files?: definitions["files"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/graph_auth_tokens": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.graph_auth_tokens.created_at"];
          user_id?: parameters["rowFilter.graph_auth_tokens.user_id"];
          id?: parameters["rowFilter.graph_auth_tokens.id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["graph_auth_tokens"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** graph_auth_tokens */
          graph_auth_tokens?: definitions["graph_auth_tokens"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.graph_auth_tokens.created_at"];
          user_id?: parameters["rowFilter.graph_auth_tokens.user_id"];
          id?: parameters["rowFilter.graph_auth_tokens.id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.graph_auth_tokens.created_at"];
          user_id?: parameters["rowFilter.graph_auth_tokens.user_id"];
          id?: parameters["rowFilter.graph_auth_tokens.id"];
        };
        body: {
          /** graph_auth_tokens */
          graph_auth_tokens?: definitions["graph_auth_tokens"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/graph_projects": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.graph_projects.id"];
          created_at?: parameters["rowFilter.graph_projects.created_at"];
          user_id?: parameters["rowFilter.graph_projects.user_id"];
          repository?: parameters["rowFilter.graph_projects.repository"];
          description?: parameters["rowFilter.graph_projects.description"];
          name?: parameters["rowFilter.graph_projects.name"];
          chain?: parameters["rowFilter.graph_projects.chain"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["graph_projects"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** graph_projects */
          graph_projects?: definitions["graph_projects"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.graph_projects.id"];
          created_at?: parameters["rowFilter.graph_projects.created_at"];
          user_id?: parameters["rowFilter.graph_projects.user_id"];
          repository?: parameters["rowFilter.graph_projects.repository"];
          description?: parameters["rowFilter.graph_projects.description"];
          name?: parameters["rowFilter.graph_projects.name"];
          chain?: parameters["rowFilter.graph_projects.chain"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.graph_projects.id"];
          created_at?: parameters["rowFilter.graph_projects.created_at"];
          user_id?: parameters["rowFilter.graph_projects.user_id"];
          repository?: parameters["rowFilter.graph_projects.repository"];
          description?: parameters["rowFilter.graph_projects.description"];
          name?: parameters["rowFilter.graph_projects.name"];
          chain?: parameters["rowFilter.graph_projects.chain"];
        };
        body: {
          /** graph_projects */
          graph_projects?: definitions["graph_projects"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/groups": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.groups.id"];
          created_at?: parameters["rowFilter.groups.created_at"];
          creator?: parameters["rowFilter.groups.creator"];
          name?: parameters["rowFilter.groups.name"];
          image?: parameters["rowFilter.groups.image"];
          description?: parameters["rowFilter.groups.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["groups"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** groups */
          groups?: definitions["groups"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.groups.id"];
          created_at?: parameters["rowFilter.groups.created_at"];
          creator?: parameters["rowFilter.groups.creator"];
          name?: parameters["rowFilter.groups.name"];
          image?: parameters["rowFilter.groups.image"];
          description?: parameters["rowFilter.groups.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.groups.id"];
          created_at?: parameters["rowFilter.groups.created_at"];
          creator?: parameters["rowFilter.groups.creator"];
          name?: parameters["rowFilter.groups.name"];
          image?: parameters["rowFilter.groups.image"];
          description?: parameters["rowFilter.groups.description"];
        };
        body: {
          /** groups */
          groups?: definitions["groups"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/integration_github": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.integration_github.id"];
          created_at?: parameters["rowFilter.integration_github.created_at"];
          repository?: parameters["rowFilter.integration_github.repository"];
          type?: parameters["rowFilter.integration_github.type"];
          user_id?: parameters["rowFilter.integration_github.user_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["integration_github"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** integration_github */
          integration_github?: definitions["integration_github"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.integration_github.id"];
          created_at?: parameters["rowFilter.integration_github.created_at"];
          repository?: parameters["rowFilter.integration_github.repository"];
          type?: parameters["rowFilter.integration_github.type"];
          user_id?: parameters["rowFilter.integration_github.user_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.integration_github.id"];
          created_at?: parameters["rowFilter.integration_github.created_at"];
          repository?: parameters["rowFilter.integration_github.repository"];
          type?: parameters["rowFilter.integration_github.type"];
          user_id?: parameters["rowFilter.integration_github.user_id"];
        };
        body: {
          /** integration_github */
          integration_github?: definitions["integration_github"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/nfts": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.nfts.created_at"];
          metadata?: parameters["rowFilter.nfts.metadata"];
          chain?: parameters["rowFilter.nfts.chain"];
          user?: parameters["rowFilter.nfts.user"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
          active?: parameters["rowFilter.nfts.active"];
          id?: parameters["rowFilter.nfts.id"];
          /** name of the nft */
          name?: parameters["rowFilter.nfts.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["nfts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** nfts */
          nfts?: definitions["nfts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.nfts.created_at"];
          metadata?: parameters["rowFilter.nfts.metadata"];
          chain?: parameters["rowFilter.nfts.chain"];
          user?: parameters["rowFilter.nfts.user"];
          limit?: parameters["rowFilter.nfts.limit"];
          active?: parameters["rowFilter.nfts.active"];
          id?: parameters["rowFilter.nfts.id"];
          /** name of the nft */
          name?: parameters["rowFilter.nfts.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.nfts.created_at"];
          metadata?: parameters["rowFilter.nfts.metadata"];
          chain?: parameters["rowFilter.nfts.chain"];
          user?: parameters["rowFilter.nfts.user"];
          limit?: parameters["rowFilter.nfts.limit"];
          active?: parameters["rowFilter.nfts.active"];
          id?: parameters["rowFilter.nfts.id"];
          /** name of the nft */
          name?: parameters["rowFilter.nfts.name"];
        };
        body: {
          /** nfts */
          nfts?: definitions["nfts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          pinataString?: parameters["rowFilter.profiles.pinataString"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          pinataString?: parameters["rowFilter.profiles.pinataString"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          pinataString?: parameters["rowFilter.profiles.pinataString"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/reward_groups": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.reward_groups.id"];
          created_at?: parameters["rowFilter.reward_groups.created_at"];
          reward_program?: parameters["rowFilter.reward_groups.reward_program"];
          group?: parameters["rowFilter.reward_groups.group"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["reward_groups"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** reward_groups */
          reward_groups?: definitions["reward_groups"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.reward_groups.id"];
          created_at?: parameters["rowFilter.reward_groups.created_at"];
          reward_program?: parameters["rowFilter.reward_groups.reward_program"];
          group?: parameters["rowFilter.reward_groups.group"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.reward_groups.id"];
          created_at?: parameters["rowFilter.reward_groups.created_at"];
          reward_program?: parameters["rowFilter.reward_groups.reward_program"];
          group?: parameters["rowFilter.reward_groups.group"];
        };
        body: {
          /** reward_groups */
          reward_groups?: definitions["reward_groups"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/reward_nft": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.reward_nft.created_at"];
          nft?: parameters["rowFilter.reward_nft.nft"];
          reward_program?: parameters["rowFilter.reward_nft.reward_program"];
          condition?: parameters["rowFilter.reward_nft.condition"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["reward_nft"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** reward_nft */
          reward_nft?: definitions["reward_nft"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.reward_nft.created_at"];
          nft?: parameters["rowFilter.reward_nft.nft"];
          reward_program?: parameters["rowFilter.reward_nft.reward_program"];
          condition?: parameters["rowFilter.reward_nft.condition"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.reward_nft.created_at"];
          nft?: parameters["rowFilter.reward_nft.nft"];
          reward_program?: parameters["rowFilter.reward_nft.reward_program"];
          condition?: parameters["rowFilter.reward_nft.condition"];
        };
        body: {
          /** reward_nft */
          reward_nft?: definitions["reward_nft"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/reward_program": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.reward_program.id"];
          created_at?: parameters["rowFilter.reward_program.created_at"];
          description?: parameters["rowFilter.reward_program.description"];
          name?: parameters["rowFilter.reward_program.name"];
          owner?: parameters["rowFilter.reward_program.owner"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["reward_program"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** reward_program */
          reward_program?: definitions["reward_program"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.reward_program.id"];
          created_at?: parameters["rowFilter.reward_program.created_at"];
          description?: parameters["rowFilter.reward_program.description"];
          name?: parameters["rowFilter.reward_program.name"];
          owner?: parameters["rowFilter.reward_program.owner"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.reward_program.id"];
          created_at?: parameters["rowFilter.reward_program.created_at"];
          description?: parameters["rowFilter.reward_program.description"];
          name?: parameters["rowFilter.reward_program.name"];
          owner?: parameters["rowFilter.reward_program.owner"];
        };
        body: {
          /** reward_program */
          reward_program?: definitions["reward_program"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/user_groups": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_groups.id"];
          created_at?: parameters["rowFilter.user_groups.created_at"];
          group_id?: parameters["rowFilter.user_groups.group_id"];
          user_id?: parameters["rowFilter.user_groups.user_id"];
          /** optional name of the user */
          name?: parameters["rowFilter.user_groups.name"];
          /** optional email of the member */
          email?: parameters["rowFilter.user_groups.email"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["user_groups"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user_groups */
          user_groups?: definitions["user_groups"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_groups.id"];
          created_at?: parameters["rowFilter.user_groups.created_at"];
          group_id?: parameters["rowFilter.user_groups.group_id"];
          user_id?: parameters["rowFilter.user_groups.user_id"];
          /** optional name of the user */
          name?: parameters["rowFilter.user_groups.name"];
          /** optional email of the member */
          email?: parameters["rowFilter.user_groups.email"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_groups.id"];
          created_at?: parameters["rowFilter.user_groups.created_at"];
          group_id?: parameters["rowFilter.user_groups.group_id"];
          user_id?: parameters["rowFilter.user_groups.user_id"];
          /** optional name of the user */
          name?: parameters["rowFilter.user_groups.name"];
          /** optional email of the member */
          email?: parameters["rowFilter.user_groups.email"];
        };
        body: {
          /** user_groups */
          user_groups?: definitions["user_groups"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/user_nft": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_nft.id"];
          user?: parameters["rowFilter.user_nft.user"];
          wallet?: parameters["rowFilter.user_nft.wallet"];
          txHash?: parameters["rowFilter.user_nft.txHash"];
          contract?: parameters["rowFilter.user_nft.contract"];
          nft?: parameters["rowFilter.user_nft.nft"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["user_nft"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user_nft */
          user_nft?: definitions["user_nft"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_nft.id"];
          user?: parameters["rowFilter.user_nft.user"];
          wallet?: parameters["rowFilter.user_nft.wallet"];
          txHash?: parameters["rowFilter.user_nft.txHash"];
          contract?: parameters["rowFilter.user_nft.contract"];
          nft?: parameters["rowFilter.user_nft.nft"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_nft.id"];
          user?: parameters["rowFilter.user_nft.user"];
          wallet?: parameters["rowFilter.user_nft.wallet"];
          txHash?: parameters["rowFilter.user_nft.txHash"];
          contract?: parameters["rowFilter.user_nft.contract"];
          nft?: parameters["rowFilter.user_nft.nft"];
        };
        body: {
          /** user_nft */
          user_nft?: definitions["user_nft"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/user_wallet": {
    get: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.user_wallet.user_id"];
          wallet?: parameters["rowFilter.user_wallet.wallet"];
          nonce?: parameters["rowFilter.user_wallet.nonce"];
          signed_nonce?: parameters["rowFilter.user_wallet.signed_nonce"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["user_wallet"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user_wallet */
          user_wallet?: definitions["user_wallet"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.user_wallet.user_id"];
          wallet?: parameters["rowFilter.user_wallet.wallet"];
          nonce?: parameters["rowFilter.user_wallet.nonce"];
          signed_nonce?: parameters["rowFilter.user_wallet.signed_nonce"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.user_wallet.user_id"];
          wallet?: parameters["rowFilter.user_wallet.wallet"];
          nonce?: parameters["rowFilter.user_wallet.nonce"];
          signed_nonce?: parameters["rowFilter.user_wallet.signed_nonce"];
        };
        body: {
          /** user_wallet */
          user_wallet?: definitions["user_wallet"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  /** @description Media uploaded to the ipfs by the users */
  files: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: uuid */
    user: string;
    /** Format: bigint */
    size: number;
    /**
     * Format: character varying
     * @description filetype
     */
    type?: string;
    /**
     * Format: character varying
     * @description filename
     */
    name?: string;
  };
  /** @description Authentication tokens used for interacting with hosted graph */
  graph_auth_tokens: {
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: uuid */
    user_id?: string;
    /**
     * Format: uuid
     * @default extensions.uuid_generate_v4()
     */
    id?: string;
  };
  /** @description graph projects created by user */
  graph_projects: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: uuid */
    user_id: string;
    /** Format: character varying */
    repository?: string;
    /** Format: character varying */
    description?: string;
    /** Format: character varying */
    name?: string;
    /** Format: character varying */
    chain?: string;
  };
  /** @description User groups used for various purposes */
  groups: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: uuid */
    creator?: string;
    /** Format: character varying */
    name?: string;
    /** Format: character varying */
    image?: string;
    /** Format: character varying */
    description?: string;
  };
  /** @description table for github integration */
  integration_github: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: numeric */
    repository?: number;
    /** Format: text */
    type?: string;
    /** Format: uuid */
    user_id?: string;
  };
  /** @description Hosted nfts created by the users */
  nfts: {
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: character varying */
    metadata: string;
    /** Format: character varying */
    chain?: string;
    /** Format: uuid */
    user?: string;
    /** Format: bigint */
    limit: number;
    /** Format: boolean */
    active?: boolean;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: character varying
     * @description name of the nft
     */
    name?: string;
  };
  profiles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    username?: string;
    /** Format: text */
    avatar_url?: string;
    /** Format: text */
    website?: string;
    /** Format: character varying */
    pinataString?: string;
  };
  /** @description Groups of people asigned to the reward_program */
  reward_groups: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `reward_program.id`.<fk table='reward_program' column='id'/>
     */
    reward_program: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `groups.id`.<fk table='groups' column='id'/>
     */
    group: number;
  };
  reward_nft: {
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `nfts.id`.<fk table='nfts' column='id'/>
     */
    nft: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `reward_program.id`.<fk table='reward_program' column='id'/>
     */
    reward_program: number;
    /** Format: character varying */
    condition?: string;
  };
  /** @description Reward systems */
  reward_program: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    description?: string;
    /** Format: text */
    name?: string;
    /** Format: uuid */
    owner: string;
  };
  /** @description Mapping table for storing information about users in a group */
  user_groups: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `groups.id`.<fk table='groups' column='id'/>
     */
    group_id: number;
    /** Format: uuid */
    user_id?: string;
    /**
     * Format: character varying
     * @description optional name of the user
     */
    name?: string;
    /**
     * Format: character varying
     * @description optional email of the member
     */
    email?: string;
  };
  /** @description Nfts claimed by the user */
  user_nft: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: uuid */
    user?: string;
    /** Format: character varying */
    wallet?: string;
    /** Format: character varying */
    txHash?: string;
    /** Format: character varying */
    contract?: string;
    /** Format: uuid */
    nft?: string;
  };
  /** @description Table for storing wallet information about users */
  user_wallet: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    user_id: string;
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    wallet: string;
    /** Format: character varying */
    nonce?: string;
    /** Format: character varying */
    signed_nonce?: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description files */
  "body.files": definitions["files"];
  /** Format: character varying */
  "rowFilter.files.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.files.created_at": string;
  /** Format: uuid */
  "rowFilter.files.user": string;
  /** Format: bigint */
  "rowFilter.files.size": string;
  /**
   * Format: character varying
   * @description filetype
   */
  "rowFilter.files.type": string;
  /**
   * Format: character varying
   * @description filename
   */
  "rowFilter.files.name": string;
  /** @description graph_auth_tokens */
  "body.graph_auth_tokens": definitions["graph_auth_tokens"];
  /** Format: timestamp with time zone */
  "rowFilter.graph_auth_tokens.created_at": string;
  /** Format: uuid */
  "rowFilter.graph_auth_tokens.user_id": string;
  /** Format: uuid */
  "rowFilter.graph_auth_tokens.id": string;
  /** @description graph_projects */
  "body.graph_projects": definitions["graph_projects"];
  /** Format: bigint */
  "rowFilter.graph_projects.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.graph_projects.created_at": string;
  /** Format: uuid */
  "rowFilter.graph_projects.user_id": string;
  /** Format: character varying */
  "rowFilter.graph_projects.repository": string;
  /** Format: character varying */
  "rowFilter.graph_projects.description": string;
  /** Format: character varying */
  "rowFilter.graph_projects.name": string;
  /** Format: character varying */
  "rowFilter.graph_projects.chain": string;
  /** @description groups */
  "body.groups": definitions["groups"];
  /** Format: bigint */
  "rowFilter.groups.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.groups.created_at": string;
  /** Format: uuid */
  "rowFilter.groups.creator": string;
  /** Format: character varying */
  "rowFilter.groups.name": string;
  /** Format: character varying */
  "rowFilter.groups.image": string;
  /** Format: character varying */
  "rowFilter.groups.description": string;
  /** @description integration_github */
  "body.integration_github": definitions["integration_github"];
  /** Format: bigint */
  "rowFilter.integration_github.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.integration_github.created_at": string;
  /** Format: numeric */
  "rowFilter.integration_github.repository": string;
  /** Format: text */
  "rowFilter.integration_github.type": string;
  /** Format: uuid */
  "rowFilter.integration_github.user_id": string;
  /** @description nfts */
  "body.nfts": definitions["nfts"];
  /** Format: timestamp with time zone */
  "rowFilter.nfts.created_at": string;
  /** Format: character varying */
  "rowFilter.nfts.metadata": string;
  /** Format: character varying */
  "rowFilter.nfts.chain": string;
  /** Format: uuid */
  "rowFilter.nfts.user": string;
  /** Format: bigint */
  "rowFilter.nfts.limit": string;
  /** Format: boolean */
  "rowFilter.nfts.active": string;
  /** Format: uuid */
  "rowFilter.nfts.id": string;
  /**
   * Format: character varying
   * @description name of the nft
   */
  "rowFilter.nfts.name": string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: uuid */
  "rowFilter.profiles.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.profiles.updated_at": string;
  /** Format: text */
  "rowFilter.profiles.username": string;
  /** Format: text */
  "rowFilter.profiles.avatar_url": string;
  /** Format: text */
  "rowFilter.profiles.website": string;
  /** Format: character varying */
  "rowFilter.profiles.pinataString": string;
  /** @description reward_groups */
  "body.reward_groups": definitions["reward_groups"];
  /** Format: bigint */
  "rowFilter.reward_groups.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.reward_groups.created_at": string;
  /** Format: bigint */
  "rowFilter.reward_groups.reward_program": string;
  /** Format: bigint */
  "rowFilter.reward_groups.group": string;
  /** @description reward_nft */
  "body.reward_nft": definitions["reward_nft"];
  /** Format: timestamp with time zone */
  "rowFilter.reward_nft.created_at": string;
  /** Format: uuid */
  "rowFilter.reward_nft.nft": string;
  /** Format: bigint */
  "rowFilter.reward_nft.reward_program": string;
  /** Format: character varying */
  "rowFilter.reward_nft.condition": string;
  /** @description reward_program */
  "body.reward_program": definitions["reward_program"];
  /** Format: bigint */
  "rowFilter.reward_program.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.reward_program.created_at": string;
  /** Format: text */
  "rowFilter.reward_program.description": string;
  /** Format: text */
  "rowFilter.reward_program.name": string;
  /** Format: uuid */
  "rowFilter.reward_program.owner": string;
  /** @description user_groups */
  "body.user_groups": definitions["user_groups"];
  /** Format: bigint */
  "rowFilter.user_groups.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.user_groups.created_at": string;
  /** Format: bigint */
  "rowFilter.user_groups.group_id": string;
  /** Format: uuid */
  "rowFilter.user_groups.user_id": string;
  /**
   * Format: character varying
   * @description optional name of the user
   */
  "rowFilter.user_groups.name": string;
  /**
   * Format: character varying
   * @description optional email of the member
   */
  "rowFilter.user_groups.email": string;
  /** @description user_nft */
  "body.user_nft": definitions["user_nft"];
  /** Format: character varying */
  "rowFilter.user_nft.id": string;
  /** Format: uuid */
  "rowFilter.user_nft.user": string;
  /** Format: character varying */
  "rowFilter.user_nft.wallet": string;
  /** Format: character varying */
  "rowFilter.user_nft.txHash": string;
  /** Format: character varying */
  "rowFilter.user_nft.contract": string;
  /** Format: uuid */
  "rowFilter.user_nft.nft": string;
  /** @description user_wallet */
  "body.user_wallet": definitions["user_wallet"];
  /** Format: uuid */
  "rowFilter.user_wallet.user_id": string;
  /** Format: character varying */
  "rowFilter.user_wallet.wallet": string;
  /** Format: character varying */
  "rowFilter.user_wallet.nonce": string;
  /** Format: character varying */
  "rowFilter.user_wallet.signed_nonce": string;
}

export interface operations {}

export interface external {}
